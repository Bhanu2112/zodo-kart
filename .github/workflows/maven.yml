# # # name: Java CI with Maven

# # # on:
# # #   push:
# # #     branches: [ "zodo_backend" ]
# # #   pull_request:
# # #     branches: [ "zodo_backend" ]

# # # jobs:
# # #   build:
# # #     runs-on: self-hosted

# # #     steps:
# # #     - uses: actions/checkout@v4
# # #     - name: Set up JDK 17
# # #       uses: actions/setup-java@v4
# # #       with:
# # #         java-version: '17'
# # #         distribution: 'temurin'
# # #         cache: maven
# # #     - name: Build with Maven
# # #       run: mvn -B package --file pom.xml

# # #     - name: Upload a Build Artifact
# # #       uses: actions/upload-artifact@v3.1.2
# # #       with:
# # #         name: zodo_backend
# # #         path: target/*.jar
# # #     - name: Execute Jar File
# # #       run: java -jar target/*.jar



# # name: Java CI with Maven

# # on:
# #   push:
# #     branches: [ "zodo_backend" ]
# #   pull_request:
# #     branches: [ "zodo_backend" ]

# # jobs:
# #   build:
# #     runs-on: self-hosted

# #     steps:
# #       - name: Checkout code
# #         uses: actions/checkout@v4

# #       - name: Set up JDK 17
# #         uses: actions/setup-java@v4
# #         with:
# #           java-version: '17'
# #           distribution: 'temurin'
# #           cache: maven

# #       - name: Build with Maven
# #         run: mvn clean package --file pom.xml

# #       - name: Upload a Build Artifact
# #         uses: actions/upload-artifact@v3.1.2
# #         with:
# #           name: zodo_backend
# #           path: target/*.jar

# #       - name: Stop existing Java application
# #         run: sudo kill -15 $(sudo lsof -t -i:8080) || echo "No process running on port 8080"

# #       - name: Execute Jar File in Background
# #         run:  mvn spring-boot:run &

# #       - name: Check if Java application is running
# #         run: ps aux | grep java

# #       # - name: Check application logs
# #       #   run: tail -n 20 app.log

# # name: AWS EC2 Deployment

# # # Trigger deployment only on push to the zodo_backend branch
# # on:
# #   push:
# #     branches:
# #       - zodo_backend

# # env:
# #   JAR_FILE: zodokart-0.0.1-SNAPSHOT.jar

# # jobs:
# #   build:
# #     name: Build and Upload
# #     runs-on: ubuntu-latest

# #     steps:
# #       - name: Checkout the code
# #         uses: actions/checkout@v3

# #       - name: Set up JDK 17
# #         uses: actions/setup-java@v3
# #         with:
# #           java-version: '17'
# #           distribution: 'temurin'

# #       - name: Build with Maven
# #         run: mvn clean package

# #       - name: Upload JAR file to EC2 with SCP
# #         uses: appleboy/scp-action@master
# #         with:
# #           host: ${{ secrets.HOST_DNS }}
# #           username: ${{ secrets.USERNAME }}
# #           key: ${{ secrets.EC2_SSH_KEY }}
# #           source: './target/${{ env.JAR_FILE }}'
# #           target: '~/'
# #           overwrite: true

# #   clean:
# #     name: Terminate Web Service on EC2
# #     runs-on: ubuntu-latest
# #     needs: build
# #     continue-on-error: true

# #     steps:
# #       - name: Set up SSH Agent with EC2 key
# #         uses: webfactory/ssh-agent@v0.5.4
# #         with:
# #           ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

# #       - name: Kill the existing Java process on EC2
# #         run: |
# #           ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST_DNS }} "pkill -f 'java -jar' || true"

# #   deploy:
# #     name: Start the Web Service on EC2
# #     runs-on: ubuntu-latest
# #     needs: [build, clean]

# #     steps:
# #       - name: Set up SSH Agent with EC2 key
# #         uses: webfactory/ssh-agent@v0.5.4
# #         with:
# #           ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

# #       - name: Start the Spring Boot application on EC2
# #         run: |
# #           ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST_DNS }} "nohup java -jar ~/${{ env.JAR_FILE }} > ~/app.log 2>&1 &"


# # This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# # For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

# # name: Java CI with Maven

# # #trigger when anything is pushed to the main branch
# # on:
# #   push:
# #     branches: [ "zodo_backend" ]

# # jobs:
# #   build:

# #     #build will run on a self-hosted server
# #     runs-on: self-hosted

# #     steps:
# #     #check out repository and clone repository to the self-hosted server
# #     - uses: actions/checkout@v4
    
# #     #set up Java on the server
# #     - name: Set up JDK 17
# #       uses: actions/setup-java@v4
# #       with:
# #         java-version: '17'
# #         distribution: 'temurin'
# #         cache: maven
# #     - name: Build with Maven
# #       run: mvn -B package --file pom.xml
# #     - name: Execute Jar File
# #     #While executing Jar file, kill port 80 if anything is running on it 
# #       run: sudo kill -9 `sudo lsof -t -i:80` & sudo java -jar /home/ubuntu/actions-runner/_work/ans-ecommerce-repo/ans-ecommerce-repo/target/zodokart-0.0.1-SNAPSHOT.jar &



# name: Java CI with Maven

# # Trigger when anything is pushed to the zodo_backend branch
# on:
#   push:
#     branches: [ "zodo_backend" ]

# jobs:
#   build:

#     # Build will run on a self-hosted server
#     runs-on: self-hosted

#     steps:
#       # Check out repository and clone repository to the self-hosted server
#       - uses: actions/checkout@v4
      
#       # Set up Java on the server
#       - name: Set up JDK 17
#         uses: actions/setup-java@v4
#         with:
#           java-version: '17'
#           distribution: 'temurin'
#           cache: maven

#       # Clean and build with Maven
#       - name: Clean and Build with Maven
#         run: mvn clean package --file pom.xml
        
#       # Execute Jar File
#       - name: Execute Jar File
#         run: sudo kill -9 `sudo lsof -t -i:80` & sudo java -jar /home/ubuntu/actions-runner/_work/ans-ecommerce-repo/ans-ecommerce-repo/target/zodokart-0.0.1-SNAPSHOT.jar &


name: Java CI with Maven

# Trigger when anything is pushed to the zodo_backend branch
on:
  push:
    branches: [ "zodo_backend" ]

jobs:
  build:

    # Build will run on a self-hosted server
    runs-on: self-hosted

    steps:
      # Check out repository and clone repository to the self-hosted server
      - uses: actions/checkout@v4

      # Set up Java on the server
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Clean and build with Maven
      - name: Clean and Build with Maven
        run: mvn clean package --file pom.xml

      # Verify new JAR file
      - name: List target directory
        run: ls -l /home/ubuntu/actions-runner/_work/ans-ecommerce-repo/ans-ecommerce-repo/target/

      # Execute Jar File
      - name: Execute Jar File
        run: |
          # Kill any existing process on port 8080, log PIDs being killed
          echo "Attempting to kill processes on port 8080..."
          PIDS=$(sudo lsof -t -i:8080)
          echo "Found PIDs: $PIDS"
          if [ -n "$PIDS" ]; then
              sudo kill -9 $PIDS
              echo "Killed processes: $PIDS"
          else
              echo "No processes found on port 8080."
          fi

          # Execute the new JAR file in the foreground
          echo "Starting new JAR file..."
          sudo java -jar /home/ubuntu/actions-runner/_work/ans-ecommerce-repo/ans-ecommerce-repo/target/zodokart-0.0.1-SNAPSHOT.jar &

